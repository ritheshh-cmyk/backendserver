import { type User, type InsertUser, type Transaction, type InsertTransaction, type InventoryItem, type InsertInventoryItem, type Supplier, type InsertSupplier, type PurchaseOrder, type InsertPurchaseOrder, type SupplierPayment, type InsertSupplierPayment, type Expenditure, type InsertExpenditure, type GroupedExpenditure, type InsertGroupedExpenditure, type GroupedExpenditurePayment, type InsertGroupedExpenditurePayment } from "../shared/schema.js";
declare class MemStorage {
    private users;
    private transactions;
    private inventoryItems;
    private suppliers;
    private purchaseOrders;
    private supplierPayments;
    private expenditures;
    private groupedExpenditures;
    private groupedExpenditurePayments;
    private bills;
    private feedbacks;
    getUserByUsername(username: string): Promise<User | null>;
    getUserById(id: number): Promise<User | null>;
    createUser(data: InsertUser): Promise<User>;
    createTransaction(data: InsertTransaction): Promise<Transaction>;
    getTransactions(limit?: number, offset?: number): Promise<Transaction[]>;
    getTransaction(id: number): Promise<Transaction | null>;
    updateTransaction(id: number, data: Partial<InsertTransaction>): Promise<Transaction | null>;
    deleteTransaction(id: number): Promise<boolean>;
    searchTransactions(search: string): Promise<Transaction[]>;
    getTransactionsByDateRange(startDate: Date, endDate: Date): Promise<Transaction[]>;
    getTodayStats(shop_id?: string): Promise<any>;
    getWeekStats(): Promise<any>;
    getMonthStats(): Promise<any>;
    getYearStats(): Promise<any>;
    createInventoryItem(data: InsertInventoryItem): Promise<InventoryItem>;
    getInventoryItems(limit?: number, offset?: number): Promise<InventoryItem[]>;
    searchInventoryItems(search: string): Promise<InventoryItem[]>;
    createSupplier(data: InsertSupplier): Promise<Supplier>;
    getSuppliers(limit?: number, offset?: number): Promise<Supplier[]>;
    searchSuppliers(search: string): Promise<Supplier[]>;
    createPurchaseOrder(data: InsertPurchaseOrder): Promise<PurchaseOrder>;
    getPurchaseOrders(limit?: number, offset?: number): Promise<PurchaseOrder[]>;
    createSupplierPayment(data: InsertSupplierPayment): Promise<SupplierPayment>;
    getSupplierPayments(supplierId?: number): Promise<SupplierPayment[]>;
    createExpenditure(data: InsertExpenditure): Promise<Expenditure>;
    getExpenditures(limit?: number, offset?: number): Promise<Expenditure[]>;
    deleteExpenditure(id: number): Promise<boolean>;
    createGroupedExpenditure(data: InsertGroupedExpenditure): Promise<GroupedExpenditure>;
    getGroupedExpenditures(limit?: number, offset?: number): Promise<GroupedExpenditure[]>;
    getGroupedExpenditure(id: number): Promise<GroupedExpenditure | null>;
    updateGroupedExpenditure(id: number, updates: Partial<InsertGroupedExpenditure>): Promise<GroupedExpenditure | null>;
    deleteGroupedExpenditure(id: number): Promise<boolean>;
    createGroupedExpenditurePayment(data: InsertGroupedExpenditurePayment): Promise<GroupedExpenditurePayment>;
    getGroupedExpenditurePayments(groupedExpenditureId?: number): Promise<GroupedExpenditurePayment[]>;
    deleteGroupedExpenditurePayment(id: number): Promise<boolean>;
    getSupplierExpenditureSummary(): Promise<any[]>;
    backupShopData(shop_id: string): Promise<any>;
    restoreShopData(shop_id: string, data: any): Promise<void>;
    getTransactionsByDateRangeForShop(shop_id: string, start: Date, end: Date): Promise<Transaction[]>;
    getBillsByDateRangeForShop(shop_id: string, start: Date, end: Date): Promise<any[]>;
    getExpendituresByDateRangeForShop(shop_id: string, start: Date, end: Date): Promise<Expenditure[]>;
    saveFeedback(billId: string, feedback: string): Promise<void>;
    getFeedback(billId: string): Promise<string | null>;
}
export declare const storage: MemStorage;
export {};
//# sourceMappingURL=storage.d.ts.map